from redis_generator.table_method_name import TableMethodName

class RedisAccessorWriter(object):
	def __init__(self, file_name, table_desc_array):
		self.file_name = file_name
		self.table_desc_array = table_desc_array
		self.table_method_name = TableMethodName()

	def write(self):
		with open(self.file_name, 'w') as f:
			self.write_class_head(f)
			self.write_class_body(f)
			f.flush()
	
	def write_class_head(self, f):
		f.write('#This file is generated by program. DO NOT EDIT IT MANUALLY!\n')
		f.write('from redis_client.redis_table import RedisTable\n\n')
		f.write('class RedisAccessor(object):\n')
		f.write('\tdef __init__(self):\n')
		f.write('\t\tself.redis_table = RedisTable()\n\n')			
	
	def write_class_body(self, f):
		for table_desc in self.table_desc_array:
			table_type = table_desc['table_type']
			if table_type == 'map':
				self.write_map_table(table_desc, f)
			elif table_type == 'list':
				self.write_list_table(table_desc, f)
			elif table_type == 'list_map':
				self.write_list_map_table(table_desc, f)	
			elif table_type == 'global_list':
				self.write_global_list_table(table_desc, f)
			elif table_type == 'global_sorted_set':
				self.write_global_sorted_set_table(table_desc, f)
			elif table_type == 'sorted_set':
				self.write_sorted_set_table(table_desc, f)
					
	def write_map_table(self, table_desc, f):
		f.write('\tdef get_' + table_desc['table_name'] + '(self, redis, id_string):\n')
		f.write('\t\treturn redis.hgetall(self.redis_table.' + self.table_method_name.get_table_method_name(table_desc['table_name']) + '(id_string))\n\n')
		
		for field in table_desc['table_field']:
			f.write('\tdef get_' + table_desc['table_name'] + '_table_' + field + '(self, redis, id_string):\n')
			f.write('\t\treturn redis.hget(\n')
			f.write('\t\t\tself.redis_table.' + self.table_method_name.get_table_method_name(table_desc['table_name']) + '(id_string),\n')
			f.write('\t\t\tself.redis_table.' + self.table_method_name.get_table_field_method_name(table_desc['table_name'], field) + '()\n')
			f.write('\t\t\t)\n\n')
		
	def write_list_table(self, table_desc, f):
		f.write('\tdef get_' + table_desc['table_name'] + '_list(self, redis, id_string):\n')
		f.write('\t\treturn redis.get(self.redis_table.' + self.table_method_name.get_list_method_name(table_desc['table_name']) + '(id_string))\n\n')
			
	def write_list_map_table(self, table_desc, f):
		self.write_list_table(table_desc, f)
		self.write_map_table(table_desc, f)
	
	def write_global_list_table(self, table_desc, f):
		f.write('\tdef get_' + table_desc['table_name'] + '_list(self, redis):\n')
		f.write('\t\treturn redis.get(self.redis_table.' + self.table_method_name.get_list_method_name(table_desc['table_name']) + '())\n\n')
		
	def write_global_sorted_set_table(self, table_desc, f):
		f.write('\tdef get_' + table_desc['table_name'] + '(self, redis, member_string):\n')
		f.write('\t\treturn redis.zrank(self.redis_table.' + self.table_method_name.get_table_method_name(table_desc['table_name']) + '(), member_string)\n\n')
	
	def write_sorted_set_table(self, table_desc, f):
		f.write('\tdef get_' + table_desc['table_name'] + '(self, redis, id_string, member_string):\n')
		f.write('\t\treturn redis.zrank(self.redis_table.' + self.table_method_name.get_table_method_name(table_desc['table_name']) + '(id_string), member_string)\n\n')

"""
from redis_client.redis_table import RedisTable

class RedisAccessor(object):
	def __init__(self):
		self.redis_table = RedisTable()
	
	def get_user(self, redis, id_string):
		return redis.hgetall(self.redis_table.get_user_key(id_string))
		
	def get_user_table_user_id(self, redis, id_string):
		return redis.hget(
			self.redis_table.get_user_key(id_string), 
			self.redis_table.get_user_table_user_id_field()
			)
		
	def get_user_table_user_name(self, redis, id_string):
		return redis.hget(
			self.redis_table.get_user_key(id_string), 
			self.redis_table.get_user_table_user_name_field()
			)
	
	def get_friend_list(self, redis, id_string):
		return redis.get(self.redis_table.get_friend_list_key(id_string))
		
	def get_friend(self, redis, id_string):
		return redis.hgetall(self.redis_table.get_friend_key(id_string))
		
	def get_friend_table_user_id(self, redis, id_string):
		return redis.hget(
			self.redis_table.get_friend_key(id_string),
			self.redis_table.get_friend_table_user_id_field()
			)
	
	def get_friend_table_user_name(self, redis, id_string):
		return redis.hget(
			self.redis_table.get_friend_key(id_string),
			self.redis_table.get_friend_table_user_name_field()
			)
		
	def get_item_list(self, redis, id_string):
		return redis.get(self.redis_table.get_item_list_key(id_string))
		
	def get_online_player_list(self, redis):
		return redis.get(self.redis_table.get_online_player_list_key())
	
	def get_level_rank(self, redis, member_string):
		return redis.zrank(self.redis_table.get_level_rank_key(), member_string)
	
	def get_race_score_rank(self, redis, id_string, member_string):
		return redis.zrank(self.redis_table.get_race_score_rank_key(id_string), member_string)
"""