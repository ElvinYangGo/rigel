#This file is generated by program. DO NOT EDIT IT MANUALLY!
from redis_client.redis_key import RedisKey

class RedisAccessor(object):
	def __init__(self):
		self.redis_key = RedisKey()

	def pexpire(self, redis, key, milliseconds):
		redis.pexpire(key, milliseconds)

	def expire(self, redis, key, seconds):
		redis.expire(key, seconds)

	def get_user(self, redis, id_string):
		return redis.hgetall(self.redis_key.get_user_key(id_string))

	def set_user(self, redis, id_string, d):
		redis.hmset(self.redis_key.get_user_key(id_string), d)

	def pexpire_user(self, redis, id_string, milliseconds):
		self.pexpire(redis, self.redis_key.get_user_key(id_string), milliseconds)

	def expire_user(self, redis, id_string, seconds):
		self.expire(redis, self.redis_key.get_user_key(id_string), seconds)

	def get_user_table_user_id(self, redis, id_string):
		return redis.hget(
			self.redis_key.get_user_key(id_string),
			self.redis_key.get_user_table_user_id_field()
			)

	def set_user_table_user_id(self, redis, id_string, user_id_string):
		redis.hset(
			self.redis_key.get_user_key(id_string),
			self.redis_key.get_user_table_user_id_field(),
			user_id_string
			)

	def get_user_table_user_name(self, redis, id_string):
		return redis.hget(
			self.redis_key.get_user_key(id_string),
			self.redis_key.get_user_table_user_name_field()
			)

	def set_user_table_user_name(self, redis, id_string, user_name_string):
		redis.hset(
			self.redis_key.get_user_key(id_string),
			self.redis_key.get_user_table_user_name_field(),
			user_name_string
			)

	def get_user_table_password(self, redis, id_string):
		return redis.hget(
			self.redis_key.get_user_key(id_string),
			self.redis_key.get_user_table_password_field()
			)

	def set_user_table_password(self, redis, id_string, password_string):
		redis.hset(
			self.redis_key.get_user_key(id_string),
			self.redis_key.get_user_table_password_field(),
			password_string
			)

	def get_item_list(self, redis, id_string):
		return redis.lrange(self.redis_key.get_item_list_key(id_string), 0, -1)

	def add_item(self, redis, id_string, item_string):
		redis.rpush(self.redis_key.get_item_list_key(id_string), item_string)

	def remove_item(self, redis, id_string, item_string):
		redis.lrem(self.redis_key.get_item_list_key(id_string), 0, item_string)

	def get_friend_list(self, redis, id_string):
		return redis.lrange(self.redis_key.get_friend_list_key(id_string), 0, -1)

	def get_friend_dict_list(self, redis, id_string):
		friend_string_list = self.get_friend_list(redis, id_string)
		with redis.pipeline() as pipe:
			for friend_string in friend_string_list:
				pipe.hgetall(self.redis_key.get_friend_key(id_string, friend_string))
			friend_dict_list = pipe.execute()
		return friend_dict_list

	def add_friend(self, redis, id_string, friend_string, d):
		redis.rpush(self.redis_key.get_friend_list_key(id_string), friend_string)
		redis.hmset(self.redis_key.get_friend_key(id_string, friend_string), d)

	def remove_friend(self, redis, id_string, friend_string):
		redis.lrem(self.redis_key.get_friend_list_key(id_string), 0, friend_string)
		redis.delete(self.redis_key.get_friend_key(id_string, friend_string))

	def get_friend(self, redis, id_string, friend_string):
		return redis.hgetall(self.redis_key.get_friend_key(id_string, friend_string))

	def set_friend(self, redis, id_string, friend_string, d):
		redis.hmset(self.redis_key.get_friend_key(id_string, friend_string), d)

	def pexpire_friend(self, redis, id_string, friend_string, milliseconds):
		self.pexpire(redis, self.redis_key.get_friend_key(id_string, friend_string), milliseconds)

	def expire_friend(self, redis, id_string, friend_string, seconds):
		self.expire(redis, self.redis_key.get_friend_key(id_string, friend_string), seconds)

	def get_friend_table_user_id(self, redis, id_string, friend_string):
		return redis.hget(
			self.redis_key.get_friend_key(id_string, friend_string),
			self.redis_key.get_friend_table_user_id_field()
			)

	def set_friend_table_user_id(self, redis, id_string, friend_string, user_id_string):
		redis.hset(
			self.redis_key.get_friend_key(id_string, friend_string),
			self.redis_key.get_friend_table_user_id_field(),
			user_id_string
			)

	def get_friend_table_user_name(self, redis, id_string, friend_string):
		return redis.hget(
			self.redis_key.get_friend_key(id_string, friend_string),
			self.redis_key.get_friend_table_user_name_field()
			)

	def set_friend_table_user_name(self, redis, id_string, friend_string, user_name_string):
		redis.hset(
			self.redis_key.get_friend_key(id_string, friend_string),
			self.redis_key.get_friend_table_user_name_field(),
			user_name_string
			)

	def get_online_player_list(self, redis):
		return redis.get(self.redis_key.get_online_player_list_key())

	def add_online_player(self, redis, online_player_string):
		redis.rpush(self.redis_key.get_online_player_list_key(), online_player_string)

	def remove_online_player(self, redis, online_player_string):
		redis.lrem(self.redis_key.get_online_player_list_key(), 0, online_player_string)

	def get_level_rank(self, redis, member_string):
		return redis.zrank(self.redis_key.get_level_rank_key(), member_string)

	def add_level_rank(self, redis, member_string, score):
		redis.zadd(self.redis_key.get_level_rank_key(), score, member_string)

	def remove_level_rank(self, redis, member_string):
		redis.zrem(self.redis_key.get_level_rank_key(), member_string)

	def get_level_rank_range(self, redis, start, stop):
		return redis.zrange(self.redis_key.get_level_rank_key(), start, stop)

	def get_race_score_rank(self, redis, id_string, member_string):
		return redis.zrank(self.redis_key.get_race_score_rank_key(id_string), member_string)

	def add_race_score_rank(self, redis, id_string, member_string, score):
		redis.zadd(self.redis_key.get_race_score_rank_key(id_string), score, member_string)

	def remove_race_score_rank(self, redis, id_string, member_string):
		redis.zrem(self.redis_key.get_race_score_rank_key(id_string), member_string)

	def get_race_score_rank_range(self, redis, id_string, start, stop):
		return redis.zrange(self.redis_key.get_race_score_rank_key(id_string), start, stop)

	def get_user_name_to_id(self, redis, field):
		return redis.hget(self.redis_key.get_user_name_to_id_key(), field)

	def set_user_name_to_id(self, redis, field, value_string):
		redis.hset(self.redis_key.get_user_name_to_id_key(), field, value_string)

	def get_client_connection_info(self, redis, id_string):
		return redis.hgetall(self.redis_key.get_client_connection_info_key(id_string))

	def set_client_connection_info(self, redis, id_string, d):
		redis.hmset(self.redis_key.get_client_connection_info_key(id_string), d)

	def pexpire_client_connection_info(self, redis, id_string, milliseconds):
		self.pexpire(redis, self.redis_key.get_client_connection_info_key(id_string), milliseconds)

	def expire_client_connection_info(self, redis, id_string, seconds):
		self.expire(redis, self.redis_key.get_client_connection_info_key(id_string), seconds)

	def get_client_connection_info_table_client_id(self, redis, id_string):
		return redis.hget(
			self.redis_key.get_client_connection_info_key(id_string),
			self.redis_key.get_client_connection_info_table_client_id_field()
			)

	def set_client_connection_info_table_client_id(self, redis, id_string, client_id_string):
		redis.hset(
			self.redis_key.get_client_connection_info_key(id_string),
			self.redis_key.get_client_connection_info_table_client_id_field(),
			client_id_string
			)

	def get_client_connection_info_table_gateway_server_name(self, redis, id_string):
		return redis.hget(
			self.redis_key.get_client_connection_info_key(id_string),
			self.redis_key.get_client_connection_info_table_gateway_server_name_field()
			)

	def set_client_connection_info_table_gateway_server_name(self, redis, id_string, gateway_server_name_string):
		redis.hset(
			self.redis_key.get_client_connection_info_key(id_string),
			self.redis_key.get_client_connection_info_table_gateway_server_name_field(),
			gateway_server_name_string
			)

	def get_client_connection_info_table_game_server_name(self, redis, id_string):
		return redis.hget(
			self.redis_key.get_client_connection_info_key(id_string),
			self.redis_key.get_client_connection_info_table_game_server_name_field()
			)

	def set_client_connection_info_table_game_server_name(self, redis, id_string, game_server_name_string):
		redis.hset(
			self.redis_key.get_client_connection_info_key(id_string),
			self.redis_key.get_client_connection_info_table_game_server_name_field(),
			game_server_name_string
			)

	def get_client_connection_info_table_token(self, redis, id_string):
		return redis.hget(
			self.redis_key.get_client_connection_info_key(id_string),
			self.redis_key.get_client_connection_info_table_token_field()
			)

	def set_client_connection_info_table_token(self, redis, id_string, token_string):
		redis.hset(
			self.redis_key.get_client_connection_info_key(id_string),
			self.redis_key.get_client_connection_info_table_token_field(),
			token_string
			)

